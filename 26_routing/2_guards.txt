1] CanActivate :

app.routing.module.ts

  {
    path: 'product/:id',
    component: DetailsComponent,
    canActivate: [CanActivateGuard],
  }

------------------------------------------------
canActivate.guard.ts

import {
  ActivatedRouteSnapshot,
  CanActivateFn,
  Router,
  RouterStateSnapshot,
} from '@angular/router';
import { Observable } from 'rxjs';
import { AuthService } from '../services/auth.service';
import { inject } from '@angular/core';

export const CanActivateGuard: CanActivateFn = (
  route: ActivatedRouteSnapshot,
  state: RouterStateSnapshot
): boolean | Observable<boolean> | Promise<boolean> => {
  const authService: AuthService = inject(AuthService);
  const router: Router = inject(Router);
  return authService.authenticate().then((res) => {
    if (res) {
      return true;
    } else {
      router.navigate(['/login']);
      return false;
    }
  });
};

------------------------------------------------
auth.service.ts

import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  loggedIn: boolean = false;

  authenticate() {
    const authPromise = new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve(this.loggedIn);
      }, 250);
    });
    return authPromise;
  }

  login() {
    this.loggedIn = true;
  }

  logout() {
    this.loggedIn = false;
  }
}


============================================================

2] CanActivateChild :

routing.module.ts
{
    path: 'parent',
    canActivateChild: [AuthGuard], // Apply the AuthGuard to child routes of 'parent'
    children: [
      // Child route configurations
    ]
  }

canActivateChild.guard.ts

import { ActivatedRouteSnapshot, CanActivateChildFn, RouterStateSnapshot, Router } from '@angular/router';

export const canActivateChild: CanActivateChildFn = (
  route: ActivatedRouteSnapshot,
  state: RouterStateSnapshot
): Observable<boolean> => {
  
  const authService = inject(AuthService);
  const router = inject(Router);

  if(loggedIn) return true;
  else return false
};
